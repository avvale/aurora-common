
type CommonCountry
{
    id: ID!
    iso3166Alpha2: GraphQLString!
    iso3166Alpha3: GraphQLString!
    iso3166Numeric: GraphQLString!
    customCode: GraphQLString
    prefix: GraphQLString
    image: GraphQLString
    sort: GraphQLInt
    administrativeAreas: JSON
    latitude: GraphQLFloat
    longitude: GraphQLFloat
    zoom: GraphQLInt
    dataLang: JSON
    createdAt: GraphQLTimestamp
    updatedAt: GraphQLTimestamp
    deletedAt: GraphQLTimestamp
    langId: ID!
    lang: CommonLang!
    name: GraphQLString!
    slug: GraphQLString!
    administrativeAreaLevel1: GraphQLString
    administrativeAreaLevel2: GraphQLString
    administrativeAreaLevel3: GraphQLString
}

input CommonCreateCountryInput
{
    id: ID!
    iso3166Alpha2: GraphQLString!
    iso3166Alpha3: GraphQLString!
    iso3166Numeric: GraphQLString!
    customCode: GraphQLString
    prefix: GraphQLString
    image: GraphQLString
    sort: GraphQLInt
    administrativeAreas: JSON
    latitude: GraphQLFloat
    longitude: GraphQLFloat
    zoom: GraphQLInt
    dataLang: JSON
    langId: ID!
    name: GraphQLString!
    slug: GraphQLString!
    administrativeAreaLevel1: GraphQLString
    administrativeAreaLevel2: GraphQLString
    administrativeAreaLevel3: GraphQLString
}

input CommonUpdateCountryInput
{
    id: ID!
    iso3166Alpha2: GraphQLString
    iso3166Alpha3: GraphQLString
    iso3166Numeric: GraphQLString
    customCode: GraphQLString
    prefix: GraphQLString
    image: GraphQLString
    sort: GraphQLInt
    administrativeAreas: JSON
    latitude: GraphQLFloat
    longitude: GraphQLFloat
    zoom: GraphQLInt
    dataLang: JSON
    langId: ID
    name: GraphQLString
    slug: GraphQLString
    administrativeAreaLevel1: GraphQLString
    administrativeAreaLevel2: GraphQLString
    administrativeAreaLevel3: GraphQLString
}

type Query
{
    commonFindCountry(query: QueryStatement constraint: QueryStatement): CommonCountry
    commonFindCountryById(id: ID constraint: QueryStatement): CommonCountry
    commonGetCountries(query: QueryStatement constraint: QueryStatement): [CommonCountry]!
    commonPaginateCountries(query: QueryStatement constraint: QueryStatement): Pagination!
}

type Mutation
{
    commonCreateCountry(payload: CommonCreateCountryInput!): CommonCountry
    commonCreateCountries(payload: [CommonCreateCountryInput]!): Boolean!
    commonUpdateCountry(payload: CommonUpdateCountryInput! constraint: QueryStatement): CommonCountry
    commonDeleteCountryById(id: ID! constraint: QueryStatement): CommonCountry
    commonDeleteCountries(query: QueryStatement constraint: QueryStatement): [CommonCountry]!
}