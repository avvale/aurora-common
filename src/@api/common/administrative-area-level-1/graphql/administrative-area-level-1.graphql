
type CommonAdministrativeAreaLevel1
{
    id: ID!
    countryId: ID!
    country: CommonCountry!
    code: GraphQLString!
    customCode: GraphQLString
    name: GraphQLString!
    slug: GraphQLString!
    latitude: GraphQLFloat
    longitude: GraphQLFloat
    zoom: GraphQLInt
    createdAt: GraphQLTimestamp
    updatedAt: GraphQLTimestamp
    deletedAt: GraphQLTimestamp
}

input CommonCreateAdministrativeAreaLevel1Input
{
    id: ID!
    countryId: ID!
    code: GraphQLString!
    customCode: GraphQLString
    name: GraphQLString!
    slug: GraphQLString!
    latitude: GraphQLFloat
    longitude: GraphQLFloat
    zoom: GraphQLInt
}

input CommonUpdateAdministrativeAreaLevel1Input
{
    id: ID!
    countryId: ID
    code: GraphQLString
    customCode: GraphQLString
    name: GraphQLString
    slug: GraphQLString
    latitude: GraphQLFloat
    longitude: GraphQLFloat
    zoom: GraphQLInt
}

type Query
{
    commonFindAdministrativeAreaLevel1(query: QueryStatement constraint: QueryStatement): CommonAdministrativeAreaLevel1
    commonFindAdministrativeAreaLevel1ById(id: ID constraint: QueryStatement): CommonAdministrativeAreaLevel1
    commonGetAdministrativeAreasLevel1(query: QueryStatement constraint: QueryStatement): [CommonAdministrativeAreaLevel1]!
    commonPaginateAdministrativeAreasLevel1(query: QueryStatement constraint: QueryStatement): Pagination!
}

type Mutation
{
    commonCreateAdministrativeAreaLevel1(payload: CommonCreateAdministrativeAreaLevel1Input!): CommonAdministrativeAreaLevel1
    commonCreateAdministrativeAreasLevel1(payload: [CommonCreateAdministrativeAreaLevel1Input]!): Boolean!
    commonUpdateAdministrativeAreaLevel1(payload: CommonUpdateAdministrativeAreaLevel1Input! constraint: QueryStatement): CommonAdministrativeAreaLevel1
    commonDeleteAdministrativeAreaLevel1ById(id: ID! constraint: QueryStatement): CommonAdministrativeAreaLevel1
    commonDeleteAdministrativeAreasLevel1(query: QueryStatement constraint: QueryStatement): [CommonAdministrativeAreaLevel1]!
}